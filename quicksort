public class quick {

	public static void main(String[] args) {
		int N = 10;   //N come√ßa com 10 se quiser pode mudar
		while( N < 10000000) {
		long cont = 0;
        int[] vetor = new int[N];

        for (int i = 0; i < vetor.length; i++) {
                vetor[i] = (int) (Math.random()*N);
        }

        long tempoInicial = System.currentTimeMillis();
       
        quickSort(vetor,0,vetor.length-1);
        
        long tempoFinal = System.currentTimeMillis();
        
        System.out.println("N = " + N +" tempo = " + (tempoFinal - tempoInicial) + "ms" + " realizou ");
        N = N*2; // dobra N para proximo teste
		}
	}

	
	private static void quickSort(int[] vetor, int inicio, int fim) {
        if (inicio < fim) {
               int posicaoPivo = separar(vetor, inicio, fim);
               quickSort(vetor, inicio, posicaoPivo - 1);
               quickSort(vetor, posicaoPivo + 1, fim);
        }
  }
	
	
	 private static int separar(int[] vetor, int inicio, int fim) {
         int pivo = vetor[inicio];
         int i = inicio + 1, f = fim;
         while (i <= f) {
                if (vetor[i] <= pivo)
                       i++;
                else if (pivo < vetor[f])
                       f--;
                else {
                       int troca = vetor[i];
                       vetor[i] = vetor[f];
                       vetor[f] = troca;
                       i++;
                       f--;
                       
                }
         }
         vetor[inicio] = vetor[f];
         vetor[f] = pivo;
         return f;
   }
		 
	 }
	 
